% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/marshal.R, R/marshal.XML.R,
%   R/marshal.connection.R, R/marshal.terra.R
\name{marshal}
\alias{marshal}
\alias{unmarshal}
\alias{marshal.XMLAbstractNode}
\alias{marshal.connection}
\alias{marshal.SpatVector}
\title{Marshal and Unmarshal R Objects}
\usage{
marshal(...)

unmarshal(...)

\method{marshal}{XMLAbstractNode}(xml, ...)

\method{marshal}{connection}(con, ...)

\method{marshal}{SpatVector}(terra, ...)
}
\arguments{
\item{\dots}{The objects to be marshalled, or unmarshalled,
followed by additional arguments passed to the S3 method.}

\item{xml}{An \link[XML:XMLAbstractNode-class]{XML::XMLAbstractNode} or
\link[XML:XMLAbstractDocument-class]{XML::XMLAbstractDocument}.}

\item{con}{A \link[base:connection]{connection}.}

\item{terra}{An \link[terra:SpatVector-class]{terra::SpatVector}.}
}
\value{
A marshaled version of the original object.

An unmarshaled version of the original object.
}
\description{
Marshal and Unmarshal R Objects
}
\examples{
if (requireNamespace("XML", quietly = TRUE)) {
  node <- XML::xmlParseString("<a><b>c</b></a>")
  print(node)
  
  ## Marshal XMLAbstractNode object
  node_ <- marshal(node)
  ## Unmarshal XMLAbstractNode object
  node2 <- unmarshal(node_)
  print(node2)
  
  stopifnot(all.equal(node2, node))
  
  
  doc <- XML::xmlParse(system.file("exampleData", "tides.xml", package = "XML"))
  
  ## Marshal XMLAbstractDocument object
  doc_ <- marshal(doc)
  ## Unmarshal XMLAbstractDocument object
  doc2 <- unmarshal(doc_)
  
  stopifnot(all.equal(doc2, doc))
}
tf <- tempfile()
cat(file = tf, letters, sep = "")

## Read-only connection
con <- file(tf, open = "rb")

bfr <- readChar(con, nchars = 4L)
print(bfr)  ## "abcd"

## Marshal read-only connection, which records the
## current state, including the current file position.
con_ <- marshal(con)

## Unmarshal connection, which restores the state
## of the original connection
con2 <- unmarshal(con_)
stopifnot(all.equal(summary(con2), summary(con)))

bfr <- readChar(con, nchars = 4L)
print(bfr)
bfr2 <- readChar(con2, nchars = 4L)
print(bfr2)
stopifnot(identical(bfr2, bfr))

## Cleanup
close(con)
close(con2)
file.remove(tf)
con <- url("https://www.r-project.org")
print(con)

## Marshal read-only connection, which records the
## current state, including the current file position.
con_ <- marshal(con)

## Unmarshal connection, which restores the state
## of the original connection
con2 <- unmarshal(con_)
print(con2)

stopifnot(all.equal(summary(con2), summary(con)))

bfr <- readChar(con, nchars = 100L)
print(bfr)
bfr2 <- readChar(con2, nchars = 100L)
print(bfr2)
stopifnot(identical(bfr2, bfr))

## Cleanup
close(con)
close(con2)

if (requireNamespace("terra", quietly = TRUE)) {
  file <- system.file("ex/lux.shp", package = "terra")
  v <- terra::vect(file)
  
  ## Marshal SpatVector object
  v_ <- marshal(v)
  
  ## Unmarshal SpatVector object
  v2 <- unmarshal(v_)
  
  stopifnot(all.equal(v2, v, check.attributes = FALSE))
}

}
