% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/marshal.inline.R
\name{marshal.CFunc}
\alias{marshal.CFunc}
\alias{marshal.inline}
\title{Marshal and Unmarshal an 'inline' object}
\usage{
\method{marshal}{CFunc}(inline, ...)
}
\arguments{
\item{inline}{A \link[inline:cfunction]{CFunc} function.}

\item{\dots}{Not used.}
}
\value{
A \code{marshalled} object as described in \code{\link[=marshal]{marshal()}}.
}
\description{
\emph{WARNING: This is very limited proof of concept!}
}
\details{
Currently, it is only possible to marshal a function:
\itemize{
\item of class \code{CFunc} that was created \emph{without} "includes" or "otherdefs"
}
}
\examples{
if (requireNamespace("inline", quietly = TRUE)) {
  code <- "
    int i;  
    for (i = 0; i < *n; i++) x[0] = x[0] + (i+1);  
  "
  sum_1_to_n <- inline::cfunction(
    signature(n = "integer", x = "numeric"),
    code,
    language = "C", convention = ".C"
  )

  ## Marshal CFunc function
  sum_1_to_n_ <- marshal(sum_1_to_n)

  ## Unarshal CFunc function
  sum_1_to_n2 <- unmarshal(sum_1_to_n_)

  y <- sum_1_to_n(10, 0)$x
  print(y)

  y2 <- sum_1_to_n2(10, 0)$x
  print(y2)
}
}
